import numpy as np

planets = {
    'Mercury': 0.4,
    'Venus': 0.7,
    'Earth': 1.0,
    'Mars': 1.5,
    'Jupiter': 5.2,
    'Saturn': 9.6,
    'Neptune': 30,
    'Uranus': 19.2,
    'Pluto': 39.5
}

##### constants
BULB = 60 # W
sigma = 5.670373*10**(-8) #Wm^-2K^-4
R_SUN = 696340000 # m
T_SUN = 5778 # K
AU = 1.495978707*10**11 # m
#####

def solar_panel_power(name, star="Sun", **kwargs):
    """Calculates the power from the solar panels at the planet

    Takes the name of the planet and details about the star, 
    outputs the power that the solar panels would deliver
    Args:
        name -- string, must be in planets dictionary
        star -- tuple, (RADIUS, TEMP) of star in m and K (default are Sun's values)
        area -- float, area of solar panels in m^2 (default is 10)
        eff -- float, efficiency of the solar panels (default is .3) 
    Returns:
        Amount of Power that would be generated by the solar panels.
    Example:
        > solar_panel_power('Mars', star=(800000000,7000), area=10, eff=.3)
        At Mars the power is 5191 W which is equivalent to 87 lightbulbs!

    """
    # Checks if the star is Sun, otherwise uses user input 
    if star == 'Sun':
        R_star = R_SUN
        T_star = T_SUN
    else:
        R_star = star[0] 
        T_star = star[1]  

    distance = planets[name] # in astronomical units (AU)
    A_star = 4 * np.pi * R_star ** 2 # Area of the sphere
    L_star = A_star * sigma * T_star**4 # Luminosity of the star aka the energy transfered from the Sun in J/s [W]
    brightness = L_star / (4 * np.pi * (distance * AU) ** 2) # Calculate the brightness of the star
    
    # Solar Panels
    area = kwargs.get('area', 10) # in m^2, default: 10
    efficiency = kwargs.get('eff', 0.3) # % of the power that gets converted into electricity, default: 0.3 
    P_solar = brightness * area * efficiency  # Power generated by the solar panels
    
    # Compare the power of P_solar to that of a bulb
    P_solar_ratio = P_solar / BULB # How many lightbulbs it can power
    p1 = f'At {name:<7} the power is {P_solar:.0f} W which is equivalent to' 
    p2 = f"{float(f'{P_solar_ratio:.2g}'):g} lightbulbs!" 
    print(p1, p2)
    return P_solar

# Test
solar_panel_power('Mars', area=10, eff=.3, star=(800000000,7000))



